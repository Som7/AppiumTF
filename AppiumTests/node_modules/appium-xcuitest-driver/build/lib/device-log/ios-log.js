'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumIosDriver = require('appium-ios-driver');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _appiumSupport = require('appium-support');

var _teen_process = require('teen_process');

var IOSLog = (function (_IOSDriverIOSLog) {
  _inherits(IOSLog, _IOSDriverIOSLog);

  function IOSLog() {
    _classCallCheck(this, IOSLog);

    _get(Object.getPrototypeOf(IOSLog.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(IOSLog, [{
    key: 'startCaptureSimulator',
    value: function startCaptureSimulator() {
      var systemLogPath, tailArgs;
      return _regeneratorRuntime.async(function startCaptureSimulator$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!_lodash2['default'].isUndefined(this.sim.udid)) {
              context$2$0.next = 2;
              break;
            }

            throw new Error('Log capture requires a sim udid');

          case 2:

            _logger2['default'].debug('Starting log capture for iOS Simulator with udid ' + this.sim.udid);
            systemLogPath = _path2['default'].resolve(this.sim.getLogDir(), 'system.log');
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(systemLogPath));

          case 6:
            if (context$2$0.sent) {
              context$2$0.next = 8;
              break;
            }

            throw new Error('No logs could be found at ' + systemLogPath);

          case 8:
            _logger2['default'].debug('System log path: ' + systemLogPath);
            tailArgs = ['-f', '-n', '1', systemLogPath];
            context$2$0.prev = 10;
            context$2$0.next = 13;
            return _regeneratorRuntime.awrap((0, _teen_process.exec)('pkill', ['-xf', ['tail'].concat(tailArgs).join(' ')]));

          case 13:
            context$2$0.next = 17;
            break;

          case 15:
            context$2$0.prev = 15;
            context$2$0.t0 = context$2$0['catch'](10);

          case 17:
            context$2$0.prev = 17;

            this.proc = new _teen_process.SubProcess('tail', tailArgs);
            context$2$0.next = 21;
            return _regeneratorRuntime.awrap(this.finishStartingLogCapture());

          case 21:
            context$2$0.next = 26;
            break;

          case 23:
            context$2$0.prev = 23;
            context$2$0.t1 = context$2$0['catch'](17);
            throw new Error('Simulator log capture failed: ' + context$2$0.t1.message);

          case 26:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[10, 15], [17, 23]]);
    }
  }, {
    key: 'isCapturing',
    get: function get() {
      return !!(this.proc && this.proc.isRunning);
    }
  }]);

  return IOSLog;
})(_appiumIosDriver.IOSLog);

exports.IOSLog = IOSLog;
exports['default'] = IOSLog;

// cleanup existing listeners if the previous session has not been terminated properly
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kZXZpY2UtbG9nL2lvcy1sb2cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OytCQUEwQyxtQkFBbUI7O29CQUM1QyxNQUFNOzs7O3NCQUNULFFBQVE7Ozs7c0JBQ04sV0FBVzs7Ozs2QkFDUixnQkFBZ0I7OzRCQUNGLGNBQWM7O0lBRXpDLE1BQU07WUFBTixNQUFNOztXQUFOLE1BQU07MEJBQU4sTUFBTTs7K0JBQU4sTUFBTTs7O2VBQU4sTUFBTTs7V0FDa0I7VUFNcEIsYUFBYSxFQUtiLFFBQVE7Ozs7aUJBVlYsb0JBQUUsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDOzs7OztrQkFDeEIsSUFBSSxLQUFLLG1DQUFtQzs7OztBQUdwRCxnQ0FBSSxLQUFLLHVEQUFxRCxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBRyxDQUFDO0FBQ3pFLHlCQUFhLEdBQUcsa0JBQUssT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLEVBQUUsWUFBWSxDQUFDOzs2Q0FDM0Qsa0JBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQzs7Ozs7Ozs7a0JBQzNCLElBQUksS0FBSyxnQ0FBOEIsYUFBYSxDQUFHOzs7QUFFL0QsZ0NBQUksS0FBSyx1QkFBcUIsYUFBYSxDQUFHLENBQUM7QUFDekMsb0JBQVEsR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLGFBQWEsQ0FBQzs7OzZDQUd6Qyx3QkFBSyxPQUFPLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxNQUFNLFNBQUssUUFBUSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDOzs7Ozs7Ozs7Ozs7O0FBRzdELGdCQUFJLENBQUMsSUFBSSxHQUFHLDZCQUFlLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQzs7NkNBQ3ZDLElBQUksQ0FBQyx3QkFBd0IsRUFBRTs7Ozs7Ozs7O2tCQUUvQixJQUFJLEtBQUssb0NBQWtDLGVBQUksT0FBTyxDQUFHOzs7Ozs7O0tBRWxFOzs7U0FFZSxlQUFHO0FBQ2pCLGFBQU8sQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUEsQUFBQyxDQUFDO0tBQzdDOzs7U0EzQkcsTUFBTTs7O1FBOEJILE1BQU0sR0FBTixNQUFNO3FCQUNBLE1BQU0iLCJmaWxlIjoibGliL2RldmljZS1sb2cvaW9zLWxvZy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElPU0xvZyBhcyBJT1NEcml2ZXJJT1NMb2cgfSBmcm9tICdhcHBpdW0taW9zLWRyaXZlcic7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlcic7XG5pbXBvcnQgeyBmcyB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCB7IFN1YlByb2Nlc3MsIGV4ZWMgfSBmcm9tICd0ZWVuX3Byb2Nlc3MnO1xuXG5jbGFzcyBJT1NMb2cgZXh0ZW5kcyBJT1NEcml2ZXJJT1NMb2cge1xuICBhc3luYyBzdGFydENhcHR1cmVTaW11bGF0b3IgKCkge1xuICAgIGlmIChfLmlzVW5kZWZpbmVkKHRoaXMuc2ltLnVkaWQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYExvZyBjYXB0dXJlIHJlcXVpcmVzIGEgc2ltIHVkaWRgKTtcbiAgICB9XG5cbiAgICBsb2cuZGVidWcoYFN0YXJ0aW5nIGxvZyBjYXB0dXJlIGZvciBpT1MgU2ltdWxhdG9yIHdpdGggdWRpZCAke3RoaXMuc2ltLnVkaWR9YCk7XG4gICAgY29uc3Qgc3lzdGVtTG9nUGF0aCA9IHBhdGgucmVzb2x2ZSh0aGlzLnNpbS5nZXRMb2dEaXIoKSwgJ3N5c3RlbS5sb2cnKTtcbiAgICBpZiAoIWF3YWl0IGZzLmV4aXN0cyhzeXN0ZW1Mb2dQYXRoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBsb2dzIGNvdWxkIGJlIGZvdW5kIGF0ICR7c3lzdGVtTG9nUGF0aH1gKTtcbiAgICB9XG4gICAgbG9nLmRlYnVnKGBTeXN0ZW0gbG9nIHBhdGg6ICR7c3lzdGVtTG9nUGF0aH1gKTtcbiAgICBjb25zdCB0YWlsQXJncyA9IFsnLWYnLCAnLW4nLCAnMScsIHN5c3RlbUxvZ1BhdGhdO1xuICAgIHRyeSB7XG4gICAgICAvLyBjbGVhbnVwIGV4aXN0aW5nIGxpc3RlbmVycyBpZiB0aGUgcHJldmlvdXMgc2Vzc2lvbiBoYXMgbm90IGJlZW4gdGVybWluYXRlZCBwcm9wZXJseVxuICAgICAgYXdhaXQgZXhlYygncGtpbGwnLCBbJy14ZicsIFsndGFpbCcsIC4uLnRhaWxBcmdzXS5qb2luKCcgJyldKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHRyeSB7XG4gICAgICB0aGlzLnByb2MgPSBuZXcgU3ViUHJvY2VzcygndGFpbCcsIHRhaWxBcmdzKTtcbiAgICAgIGF3YWl0IHRoaXMuZmluaXNoU3RhcnRpbmdMb2dDYXB0dXJlKCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFNpbXVsYXRvciBsb2cgY2FwdHVyZSBmYWlsZWQ6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGlzQ2FwdHVyaW5nICgpIHtcbiAgICByZXR1cm4gISEodGhpcy5wcm9jICYmIHRoaXMucHJvYy5pc1J1bm5pbmcpO1xuICB9XG59XG5cbmV4cG9ydCB7IElPU0xvZyB9O1xuZXhwb3J0IGRlZmF1bHQgSU9TTG9nO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
