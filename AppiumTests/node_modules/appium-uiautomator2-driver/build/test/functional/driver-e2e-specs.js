'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _appiumAdb = require('appium-adb');

var _appiumAdb2 = _interopRequireDefault(_appiumAdb);

var _desired = require('./desired');

var _helpersSession = require('./helpers/session');

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

var APIDEMOS_PACKAGE = 'io.appium.android.apis';

function killServer(adbPort) {
  var adb;
  return _regeneratorRuntime.async(function killServer$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_appiumAdb2['default'].createADB({ adbPort: adbPort }));

      case 2:
        adb = context$1$0.sent;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(adb.killServer());

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

describe('createSession', function () {
  var driver = undefined;
  before(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(killServer(5037));

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  describe('default adb port', function () {
    var _this = this;

    afterEach(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            if (!driver) {
              context$3$0.next = 3;
              break;
            }

            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.quit());

          case 3:
            driver = null;

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should start android session focusing on default pkg and act', function callee$2$0() {
      var appPackage, appActivity;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _helpersSession.initDriver)(_desired.APIDEMOS_CAPS));

          case 2:
            driver = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(driver.getCurrentPackage());

          case 5:
            appPackage = context$3$0.sent;
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(driver.getCurrentDeviceActivity());

          case 8:
            appActivity = context$3$0.sent;

            appPackage.should.equal('io.appium.android.apis');
            appActivity.should.equal('.ApiDemos');

          case 11:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should start android session focusing on custom pkg and act', function callee$2$0() {
      var caps, appPackage, appActivity;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            caps = _Object$assign({}, _desired.APIDEMOS_CAPS, {
              appPackage: 'io.appium.android.apis',
              appActivity: '.view.SplitTouchView'
            });
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap((0, _helpersSession.initDriver)(caps));

          case 3:
            driver = context$3$0.sent;
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(driver.getCurrentPackage());

          case 6:
            appPackage = context$3$0.sent;
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(driver.getCurrentDeviceActivity());

          case 9:
            appActivity = context$3$0.sent;

            appPackage.should.equal(caps.appPackage);
            appActivity.should.equal(caps.appActivity);

          case 12:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should error out for not apk extension', function callee$2$0() {
      var caps;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            caps = _Object$assign({}, _desired.APIDEMOS_CAPS, {
              app: 'foo',
              appPackage: 'io.appium.android.apis',
              appActivity: '.view.SplitTouchView'
            });
            context$3$0.prev = 1;
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap((0, _helpersSession.initDriver)(caps));

          case 4:
            throw new Error('Call to \'initDriver\' should not have succeeded');

          case 7:
            context$3$0.prev = 7;
            context$3$0.t0 = context$3$0['catch'](1);

            context$3$0.t0.data.should.match(/New app path foo did not have extension \.apk/);

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this, [[1, 7]]);
    });
    it('should error out for invalid app path', function callee$2$0() {
      var caps;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            caps = _Object$assign({}, _desired.APIDEMOS_CAPS, {
              app: 'foo.apk',
              appPackage: 'io.appium.android.apis',
              appActivity: '.view.SplitTouchView'
            });
            context$3$0.prev = 1;
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap((0, _helpersSession.initDriver)(caps));

          case 4:
            throw new Error('Call to \'initDriver\' should not have succeeded');

          case 7:
            context$3$0.prev = 7;
            context$3$0.t0 = context$3$0['catch'](1);

            context$3$0.t0.data.should.match(/Could not find/);

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this, [[1, 7]]);
    });
    it('should get device model, manufacturer and screen size in session details', function callee$2$0() {
      var caps, serverCaps;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            caps = _Object$assign({}, _desired.APIDEMOS_CAPS, {
              appPackage: 'io.appium.android.apis',
              appActivity: '.view.SplitTouchView'
            });
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap((0, _helpersSession.initDriver)(caps));

          case 3:
            driver = context$3$0.sent;
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(driver.sessionCapabilities());

          case 6:
            serverCaps = context$3$0.sent;

            serverCaps.deviceScreenSize.should.exist;
            serverCaps.deviceModel.should.exist;
            serverCaps.deviceManufacturer.should.exist;

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });

  describe('custom adb port', function () {
    var _this2 = this;

    // Don't do these tests on TestObject. Cannot use TestObject's ADB.
    if (process.env.TESTOBJECT_E2E_TESTS) {
      return;
    }

    var adbPort = 5042;
    var driver = undefined;

    before(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(killServer(5037));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    afterEach(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.quit());

          case 2:
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(killServer(adbPort));

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should start android session with a custom adb port', function callee$2$0() {
      var caps, appPackage, appActivity;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            caps = _Object$assign({}, _desired.APIDEMOS_CAPS, {
              adbPort: adbPort
            });
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap((0, _helpersSession.initDriver)(caps, adbPort));

          case 3:
            driver = context$3$0.sent;
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(driver.getCurrentPackage());

          case 6:
            appPackage = context$3$0.sent;
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(driver.getCurrentDeviceActivity());

          case 9:
            appActivity = context$3$0.sent;

            appPackage.should.equal('io.appium.android.apis');
            appActivity.should.equal('.ApiDemos');

          case 12:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });
  });
});

describe('close', function () {
  var _this3 = this;

  it('should close application', function callee$1$0() {
    var driver, appPackage;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _helpersSession.initDriver)(_desired.APIDEMOS_CAPS));

        case 2:
          driver = context$2$0.sent;
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(driver.closeApp());

        case 5:
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(driver.getCurrentPackage());

        case 7:
          appPackage = context$2$0.sent;

          if (appPackage) {
            appPackage.should.not.equal(APIDEMOS_PACKAGE);
          }

        case 9:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this3);
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
