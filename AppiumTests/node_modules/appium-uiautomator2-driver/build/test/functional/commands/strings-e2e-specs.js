'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _desired = require('../desired');

var _appiumAdb = require('appium-adb');

var _appiumAdb2 = _interopRequireDefault(_appiumAdb);

var _helpersSession = require('../helpers/session');

var _helpersHelpers = require('../helpers/helpers');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumAndroidDriver = require('appium-android-driver');

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('strings', function () {
  var driver = undefined;

  describe('specific language', function () {
    var _this = this;

    before(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _helpersSession.initDriver)(_desired.APIDEMOS_CAPS));

          case 2:
            driver = context$3$0.sent;

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    after(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.quit());

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should return app strings', function callee$2$0() {
      var strings;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.getAppStrings('en'));

          case 2:
            strings = context$3$0.sent;

            strings.hello_world.should.equal('<b>Hello, <i>World!</i></b>');

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should return app strings for different language', function callee$2$0() {
      var strings;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.getAppStrings('fr'));

          case 2:
            strings = context$3$0.sent;

            strings.hello_world.should.equal('<b>Bonjour, <i>Monde!</i></b>');

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });

  describe('device language', function () {
    var initialLocale = undefined;
    var adb = undefined;
    before(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            // restarting doesn't work on Android 7+
            adb = new _appiumAdb2['default']();
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.getApiLevel());

          case 3:
            context$3$0.t0 = context$3$0.sent;

            if (!(context$3$0.t0 > 23)) {
              context$3$0.next = 6;
              break;
            }

            return context$3$0.abrupt('return', this.skip());

          case 6:
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap((0, _helpersHelpers.getLocale)(adb));

          case 8:
            initialLocale = context$3$0.sent;

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    afterEach(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            if (!driver) {
              context$3$0.next = 5;
              break;
            }

            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_appiumAndroidDriver.androidHelpers.ensureDeviceLocale(adb, null, initialLocale));

          case 3:
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(driver.quit());

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should return app strings with default locale/language', function callee$2$0() {
      var strings;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _helpersSession.initDriver)(_desired.APIDEMOS_CAPS));

          case 2:
            driver = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(driver.getAppStrings());

          case 5:
            strings = context$3$0.sent;

            strings.hello_world.should.equal('<b>Hello, <i>World!</i></b>');

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should return app strings when language/locale set @skip-ci', function callee$2$0() {
      var strings;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _helpersSession.initDriver)(_lodash2['default'].defaults({
              language: 'fr',
              locale: 'CA'
            }, _desired.APIDEMOS_CAPS)));

          case 2:
            driver = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(driver.getAppStrings());

          case 5:
            strings = context$3$0.sent;

            strings.hello_world.should.equal('<b>Bonjour, <i>Monde!</i></b>');

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
});
//eslint-disable-line curly
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZnVuY3Rpb25hbC9jb21tYW5kcy9zdHJpbmdzLWUyZS1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7b0JBQWlCLE1BQU07Ozs7OEJBQ0ksa0JBQWtCOzs7O3VCQUNmLFlBQVk7O3lCQUMxQixZQUFZOzs7OzhCQUNELG9CQUFvQjs7OEJBQ3JCLG9CQUFvQjs7c0JBQ2hDLFFBQVE7Ozs7bUNBQ1MsdUJBQXVCOztBQUd0RCxrQkFBSyxNQUFNLEVBQUUsQ0FBQztBQUNkLGtCQUFLLEdBQUcsNkJBQWdCLENBQUM7O0FBRXpCLFFBQVEsQ0FBQyxTQUFTLEVBQUUsWUFBWTtBQUM5QixNQUFJLE1BQU0sWUFBQSxDQUFDOztBQUVYLFVBQVEsQ0FBQyxtQkFBbUIsRUFBRSxZQUFZOzs7QUFDeEMsVUFBTSxDQUFDOzs7Ozs2Q0FDVSx1REFBeUI7OztBQUF4QyxrQkFBTTs7Ozs7OztLQUNQLENBQUMsQ0FBQztBQUNILFNBQUssQ0FBQzs7Ozs7NkNBQ0UsTUFBTSxDQUFDLElBQUksRUFBRTs7Ozs7OztLQUNwQixDQUFDLENBQUM7O0FBRUgsTUFBRSxDQUFDLDJCQUEyQixFQUFFO1VBQzFCLE9BQU87Ozs7OzZDQUFTLE1BQU0sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDOzs7QUFBMUMsbUJBQU87O0FBQ1gsbUJBQU8sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDOzs7Ozs7O0tBQ2pFLENBQUMsQ0FBQzs7QUFFSCxNQUFFLENBQUMsa0RBQWtELEVBQUU7VUFDakQsT0FBTzs7Ozs7NkNBQVMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUM7OztBQUExQyxtQkFBTzs7QUFDWCxtQkFBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLCtCQUErQixDQUFDLENBQUM7Ozs7Ozs7S0FDbkUsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDOztBQUVILFVBQVEsQ0FBQyxpQkFBaUIsRUFBRSxZQUFZO0FBQ3RDLFFBQUksYUFBYSxZQUFBLENBQUM7QUFDbEIsUUFBSSxHQUFHLFlBQUEsQ0FBQztBQUNSLFVBQU0sQ0FBQzs7Ozs7QUFFTCxlQUFHLEdBQUcsNEJBQVMsQ0FBQzs7NkNBQ04sR0FBRyxDQUFDLFdBQVcsRUFBRTs7Ozs7bUNBQUcsRUFBRTs7Ozs7Z0RBQVMsSUFBSSxDQUFDLElBQUksRUFBRTs7Ozs2Q0FFOUIsK0JBQVUsR0FBRyxDQUFDOzs7QUFBcEMseUJBQWE7Ozs7Ozs7S0FDZCxDQUFDLENBQUM7QUFDSCxhQUFTLENBQUM7Ozs7aUJBQ0osTUFBTTs7Ozs7OzZDQUNGLG9DQUFlLGtCQUFrQixDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsYUFBYSxDQUFDOzs7OzZDQUUzRCxNQUFNLENBQUMsSUFBSSxFQUFFOzs7Ozs7O0tBRXRCLENBQUMsQ0FBQzs7QUFFSCxNQUFFLENBQUMsd0RBQXdELEVBQUU7VUFHdkQsT0FBTzs7Ozs7NkNBRkksdURBQXlCOzs7QUFBeEMsa0JBQU07OzZDQUVjLE1BQU0sQ0FBQyxhQUFhLEVBQUU7OztBQUF0QyxtQkFBTzs7QUFDWCxtQkFBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUM7Ozs7Ozs7S0FDakUsQ0FBQyxDQUFDO0FBQ0gsTUFBRSxDQUFDLDZEQUE2RCxFQUFFO1VBTTVELE9BQU87Ozs7OzZDQUxJLGdDQUFXLG9CQUFFLFFBQVEsQ0FBQztBQUNuQyxzQkFBUSxFQUFFLElBQUk7QUFDZCxvQkFBTSxFQUFFLElBQUk7YUFDYix5QkFBZ0IsQ0FBQzs7O0FBSGxCLGtCQUFNOzs2Q0FLYyxNQUFNLENBQUMsYUFBYSxFQUFFOzs7QUFBdEMsbUJBQU87O0FBQ1gsbUJBQU8sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxDQUFDOzs7Ozs7O0tBQ25FLENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQztDQUNKLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L2Z1bmN0aW9uYWwvY29tbWFuZHMvc3RyaW5ncy1lMmUtc3BlY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCBjaGFpQXNQcm9taXNlZCBmcm9tICdjaGFpLWFzLXByb21pc2VkJztcbmltcG9ydCB7IEFQSURFTU9TX0NBUFMgfSBmcm9tICcuLi9kZXNpcmVkJztcbmltcG9ydCBBREIgZnJvbSAnYXBwaXVtLWFkYic7XG5pbXBvcnQgeyBpbml0RHJpdmVyIH0gZnJvbSAnLi4vaGVscGVycy9zZXNzaW9uJztcbmltcG9ydCB7IGdldExvY2FsZSB9IGZyb20gJy4uL2hlbHBlcnMvaGVscGVycyc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgYW5kcm9pZEhlbHBlcnMgfSBmcm9tICdhcHBpdW0tYW5kcm9pZC1kcml2ZXInO1xuXG5cbmNoYWkuc2hvdWxkKCk7XG5jaGFpLnVzZShjaGFpQXNQcm9taXNlZCk7XG5cbmRlc2NyaWJlKCdzdHJpbmdzJywgZnVuY3Rpb24gKCkge1xuICBsZXQgZHJpdmVyO1xuXG4gIGRlc2NyaWJlKCdzcGVjaWZpYyBsYW5ndWFnZScsIGZ1bmN0aW9uICgpIHtcbiAgICBiZWZvcmUoYXN5bmMgKCkgPT4ge1xuICAgICAgZHJpdmVyID0gYXdhaXQgaW5pdERyaXZlcihBUElERU1PU19DQVBTKTtcbiAgICB9KTtcbiAgICBhZnRlcihhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBhd2FpdCBkcml2ZXIucXVpdCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gYXBwIHN0cmluZ3MnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgc3RyaW5ncyA9IGF3YWl0IGRyaXZlci5nZXRBcHBTdHJpbmdzKCdlbicpO1xuICAgICAgc3RyaW5ncy5oZWxsb193b3JsZC5zaG91bGQuZXF1YWwoJzxiPkhlbGxvLCA8aT5Xb3JsZCE8L2k+PC9iPicpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gYXBwIHN0cmluZ3MgZm9yIGRpZmZlcmVudCBsYW5ndWFnZScsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBzdHJpbmdzID0gYXdhaXQgZHJpdmVyLmdldEFwcFN0cmluZ3MoJ2ZyJyk7XG4gICAgICBzdHJpbmdzLmhlbGxvX3dvcmxkLnNob3VsZC5lcXVhbCgnPGI+Qm9uam91ciwgPGk+TW9uZGUhPC9pPjwvYj4nKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2RldmljZSBsYW5ndWFnZScsIGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgaW5pdGlhbExvY2FsZTtcbiAgICBsZXQgYWRiO1xuICAgIGJlZm9yZShhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyByZXN0YXJ0aW5nIGRvZXNuJ3Qgd29yayBvbiBBbmRyb2lkIDcrXG4gICAgICBhZGIgPSBuZXcgQURCKCk7XG4gICAgICBpZiAoYXdhaXQgYWRiLmdldEFwaUxldmVsKCkgPiAyMykgcmV0dXJuIHRoaXMuc2tpcCgpOyAvL2VzbGludC1kaXNhYmxlLWxpbmUgY3VybHlcblxuICAgICAgaW5pdGlhbExvY2FsZSA9IGF3YWl0IGdldExvY2FsZShhZGIpO1xuICAgIH0pO1xuICAgIGFmdGVyRWFjaChhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoZHJpdmVyKSB7XG4gICAgICAgIGF3YWl0IGFuZHJvaWRIZWxwZXJzLmVuc3VyZURldmljZUxvY2FsZShhZGIsIG51bGwsIGluaXRpYWxMb2NhbGUpO1xuXG4gICAgICAgIGF3YWl0IGRyaXZlci5xdWl0KCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiBhcHAgc3RyaW5ncyB3aXRoIGRlZmF1bHQgbG9jYWxlL2xhbmd1YWdlJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgZHJpdmVyID0gYXdhaXQgaW5pdERyaXZlcihBUElERU1PU19DQVBTKTtcblxuICAgICAgbGV0IHN0cmluZ3MgPSBhd2FpdCBkcml2ZXIuZ2V0QXBwU3RyaW5ncygpO1xuICAgICAgc3RyaW5ncy5oZWxsb193b3JsZC5zaG91bGQuZXF1YWwoJzxiPkhlbGxvLCA8aT5Xb3JsZCE8L2k+PC9iPicpO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgcmV0dXJuIGFwcCBzdHJpbmdzIHdoZW4gbGFuZ3VhZ2UvbG9jYWxlIHNldCBAc2tpcC1jaScsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGRyaXZlciA9IGF3YWl0IGluaXREcml2ZXIoXy5kZWZhdWx0cyh7XG4gICAgICAgIGxhbmd1YWdlOiAnZnInLFxuICAgICAgICBsb2NhbGU6ICdDQScsXG4gICAgICB9LCBBUElERU1PU19DQVBTKSk7XG5cbiAgICAgIGxldCBzdHJpbmdzID0gYXdhaXQgZHJpdmVyLmdldEFwcFN0cmluZ3MoKTtcbiAgICAgIHN0cmluZ3MuaGVsbG9fd29ybGQuc2hvdWxkLmVxdWFsKCc8Yj5Cb25qb3VyLCA8aT5Nb25kZSE8L2k+PC9iPicpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLiJ9
