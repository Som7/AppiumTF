'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _wd = require('wd');

var _wd2 = _interopRequireDefault(_wd);

var _desired = require('../desired');

var _helpersSession = require('../helpers/session');

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('apidemo - touch', function () {
  describe('multi-actions', function () {
    var _this = this;

    var driver = undefined;
    before(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _helpersSession.initDriver)(_Object$assign({}, _desired.APIDEMOS_CAPS, {
              appPackage: 'io.appium.android.apis',
              appActivity: '.view.SplitTouchView'
            })));

          case 2:
            driver = context$3$0.sent;

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    after(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.quit());

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should scroll two different lists', function callee$2$0() {
      var _ref, _ref2, leftEl, rightEl, leftGesture, rightGesture, multiAction;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.elementsByClassName('android.widget.ListView'));

          case 2:
            _ref = context$3$0.sent;
            _ref2 = _slicedToArray(_ref, 2);
            leftEl = _ref2[0];
            rightEl = _ref2[1];
            leftGesture = new _wd2['default'].TouchAction().press({ element: leftEl }).moveTo({ element: leftEl, x: 10, y: 0 }).moveTo({ element: leftEl, x: 10, y: -75 }).moveTo({ element: leftEl, x: 10, y: -150 });
            rightGesture = new _wd2['default'].TouchAction().press({ element: rightEl }).moveTo({ element: rightEl, x: 10, y: 0 }).moveTo({ element: rightEl, x: 10, y: -75 }).moveTo({ element: rightEl, x: 10, y: -150 });
            multiAction = new _wd2['default'].MultiAction();

            multiAction.add(leftGesture, rightGesture);

            context$3$0.next = 12;
            return _regeneratorRuntime.awrap(driver.performMultiAction(multiAction));

          case 12:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });

  describe('swipe-action', function () {
    var _this2 = this;

    var driver = undefined;
    before(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _helpersSession.initDriver)(_Object$assign({}, _desired.APIDEMOS_CAPS, {
              appPackage: 'io.appium.android.apis',
              appActivity: '.view.List1'
            })));

          case 2:
            driver = context$3$0.sent;

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });
    after(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.quit());

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });

    function assertElement(driver) {
      var present = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
      var els;
      return _regeneratorRuntime.async(function assertElement$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.elementsByXPath("//*[@text='Abertam']"));

          case 2:
            els = context$3$0.sent;

            els.should.be.an['instanceof'](Array);
            els.should.have.length(present ? 1 : 0);

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    }

    it('should swipe @skip-ci', function callee$2$0() {
      var action;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(assertElement(driver, true));

          case 2:
            action = new _wd2['default'].TouchAction();

            action.press({ x: 100, y: 650 }).wait(3000).moveTo({ x: 100, y: 50 }).release();
            driver.performTouchAction(action);
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(assertElement(driver, false));

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZnVuY3Rpb25hbC9jb21tYW5kcy90b3VjaC1hY3Rpb24tZTJlLXNwZWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7b0JBQWlCLE1BQU07Ozs7OEJBQ0ksa0JBQWtCOzs7O2tCQUM5QixJQUFJOzs7O3VCQUNXLFlBQVk7OzhCQUNmLG9CQUFvQjs7QUFHL0Msa0JBQUssTUFBTSxFQUFFLENBQUM7QUFDZCxrQkFBSyxHQUFHLDZCQUFnQixDQUFDOztBQUV6QixRQUFRLENBQUMsaUJBQWlCLEVBQUUsWUFBWTtBQUN0QyxVQUFRLENBQUMsZUFBZSxFQUFFLFlBQVk7OztBQUNwQyxRQUFJLE1BQU0sWUFBQSxDQUFDO0FBQ1gsVUFBTSxDQUFDOzs7Ozs2Q0FDVSxnQ0FBVyxlQUFjLEVBQUUsMEJBQWlCO0FBQ3pELHdCQUFVLEVBQUUsd0JBQXdCO0FBQ3BDLHlCQUFXLEVBQUUsc0JBQXNCO2FBQ3BDLENBQUMsQ0FBQzs7O0FBSEgsa0JBQU07Ozs7Ozs7S0FJUCxDQUFDLENBQUM7QUFDSCxTQUFLLENBQUM7Ozs7OzZDQUNFLE1BQU0sQ0FBQyxJQUFJLEVBQUU7Ozs7Ozs7S0FDcEIsQ0FBQyxDQUFDOztBQUVILE1BQUUsQ0FBQyxtQ0FBbUMsRUFBRTt1QkFDakMsTUFBTSxFQUFFLE9BQU8sRUFFZCxXQUFXLEVBTVgsWUFBWSxFQU1aLFdBQVc7Ozs7Ozs2Q0FkYSxNQUFNLENBQUMsbUJBQW1CLENBQUMseUJBQXlCLENBQUM7Ozs7O0FBQTlFLGtCQUFNO0FBQUUsbUJBQU87QUFFZCx1QkFBVyxHQUFHLElBQUksZ0JBQUcsV0FBVyxFQUFFLENBQ3JDLEtBQUssQ0FBQyxFQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUMsQ0FBQyxDQUN4QixNQUFNLENBQUMsRUFBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDLENBQ3RDLE1BQU0sQ0FBQyxFQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUN4QyxNQUFNLENBQUMsRUFBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFDLENBQUM7QUFFdEMsd0JBQVksR0FBRyxJQUFJLGdCQUFHLFdBQVcsRUFBRSxDQUN0QyxLQUFLLENBQUMsRUFBQyxPQUFPLEVBQUUsT0FBTyxFQUFDLENBQUMsQ0FDekIsTUFBTSxDQUFDLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUN2QyxNQUFNLENBQUMsRUFBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FDekMsTUFBTSxDQUFDLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBQyxDQUFDO0FBRXZDLHVCQUFXLEdBQUcsSUFBSSxnQkFBRyxXQUFXLEVBQUU7O0FBQ3hDLHVCQUFXLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxZQUFZLENBQUMsQ0FBQzs7OzZDQUVyQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsV0FBVyxDQUFDOzs7Ozs7O0tBQzdDLENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQzs7QUFFSCxVQUFRLENBQUMsY0FBYyxFQUFFLFlBQVk7OztBQUNuQyxRQUFJLE1BQU0sWUFBQSxDQUFDO0FBQ1gsVUFBTSxDQUFDOzs7Ozs2Q0FDVSxnQ0FBVyxlQUFjLEVBQUUsMEJBQWlCO0FBQ3pELHdCQUFVLEVBQUUsd0JBQXdCO0FBQ3BDLHlCQUFXLEVBQUUsYUFBYTthQUMzQixDQUFDLENBQUM7OztBQUhILGtCQUFNOzs7Ozs7O0tBSVAsQ0FBQyxDQUFDO0FBQ0gsU0FBSyxDQUFDOzs7Ozs2Q0FDRSxNQUFNLENBQUMsSUFBSSxFQUFFOzs7Ozs7O0tBQ3BCLENBQUMsQ0FBQzs7QUFFSCxhQUFlLGFBQWEsQ0FBRSxNQUFNO1VBQUUsT0FBTyx5REFBRyxJQUFJO1VBQzlDLEdBQUc7Ozs7OzZDQUFTLE1BQU0sQ0FBQyxlQUFlLENBQUMsc0JBQXNCLENBQUM7OztBQUExRCxlQUFHOztBQUNQLGVBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsY0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ25DLGVBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDOzs7Ozs7O0tBQ3pDOztBQUVELE1BQUUsQ0FBQyx1QkFBdUIsRUFBRTtVQUVwQixNQUFNOzs7Ozs2Q0FETixhQUFhLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQzs7O0FBQzNCLGtCQUFNLEdBQUcsSUFBSSxnQkFBRyxXQUFXLEVBQUU7O0FBQ25DLGtCQUFNLENBQUMsS0FBSyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFDLENBQUMsQ0FDM0IsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUNWLE1BQU0sQ0FBQyxFQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBQyxDQUFDLENBQ3ZCLE9BQU8sRUFBRSxDQUFDO0FBQ2Isa0JBQU0sQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsQ0FBQzs7NkNBQzVCLGFBQWEsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDOzs7Ozs7O0tBQ25DLENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQztDQUNKLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L2Z1bmN0aW9uYWwvY29tbWFuZHMvdG91Y2gtYWN0aW9uLWUyZS1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjaGFpIGZyb20gJ2NoYWknO1xuaW1wb3J0IGNoYWlBc1Byb21pc2VkIGZyb20gJ2NoYWktYXMtcHJvbWlzZWQnO1xuaW1wb3J0IHdkIGZyb20gJ3dkJztcbmltcG9ydCB7IEFQSURFTU9TX0NBUFMgfSBmcm9tICcuLi9kZXNpcmVkJztcbmltcG9ydCB7IGluaXREcml2ZXIgfSBmcm9tICcuLi9oZWxwZXJzL3Nlc3Npb24nO1xuXG5cbmNoYWkuc2hvdWxkKCk7XG5jaGFpLnVzZShjaGFpQXNQcm9taXNlZCk7XG5cbmRlc2NyaWJlKCdhcGlkZW1vIC0gdG91Y2gnLCBmdW5jdGlvbiAoKSB7XG4gIGRlc2NyaWJlKCdtdWx0aS1hY3Rpb25zJywgZnVuY3Rpb24gKCkge1xuICAgIGxldCBkcml2ZXI7XG4gICAgYmVmb3JlKGFzeW5jICgpID0+IHtcbiAgICAgIGRyaXZlciA9IGF3YWl0IGluaXREcml2ZXIoT2JqZWN0LmFzc2lnbih7fSwgQVBJREVNT1NfQ0FQUywge1xuICAgICAgICBhcHBQYWNrYWdlOiAnaW8uYXBwaXVtLmFuZHJvaWQuYXBpcycsXG4gICAgICAgIGFwcEFjdGl2aXR5OiAnLnZpZXcuU3BsaXRUb3VjaFZpZXcnLFxuICAgICAgfSkpO1xuICAgIH0pO1xuICAgIGFmdGVyKGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IGRyaXZlci5xdWl0KCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHNjcm9sbCB0d28gZGlmZmVyZW50IGxpc3RzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbGV0IFtsZWZ0RWwsIHJpZ2h0RWxdID0gYXdhaXQgZHJpdmVyLmVsZW1lbnRzQnlDbGFzc05hbWUoJ2FuZHJvaWQud2lkZ2V0Lkxpc3RWaWV3Jyk7XG5cbiAgICAgIGNvbnN0IGxlZnRHZXN0dXJlID0gbmV3IHdkLlRvdWNoQWN0aW9uKClcbiAgICAgICAgLnByZXNzKHtlbGVtZW50OiBsZWZ0RWx9KVxuICAgICAgICAubW92ZVRvKHtlbGVtZW50OiBsZWZ0RWwsIHg6IDEwLCB5OiAwfSlcbiAgICAgICAgLm1vdmVUbyh7ZWxlbWVudDogbGVmdEVsLCB4OiAxMCwgeTogLTc1fSlcbiAgICAgICAgLm1vdmVUbyh7ZWxlbWVudDogbGVmdEVsLCB4OiAxMCwgeTogLTE1MH0pO1xuXG4gICAgICBjb25zdCByaWdodEdlc3R1cmUgPSBuZXcgd2QuVG91Y2hBY3Rpb24oKVxuICAgICAgICAucHJlc3Moe2VsZW1lbnQ6IHJpZ2h0RWx9KVxuICAgICAgICAubW92ZVRvKHtlbGVtZW50OiByaWdodEVsLCB4OiAxMCwgeTogMH0pXG4gICAgICAgIC5tb3ZlVG8oe2VsZW1lbnQ6IHJpZ2h0RWwsIHg6IDEwLCB5OiAtNzV9KVxuICAgICAgICAubW92ZVRvKHtlbGVtZW50OiByaWdodEVsLCB4OiAxMCwgeTogLTE1MH0pO1xuXG4gICAgICBjb25zdCBtdWx0aUFjdGlvbiA9IG5ldyB3ZC5NdWx0aUFjdGlvbigpO1xuICAgICAgbXVsdGlBY3Rpb24uYWRkKGxlZnRHZXN0dXJlLCByaWdodEdlc3R1cmUpO1xuXG4gICAgICBhd2FpdCBkcml2ZXIucGVyZm9ybU11bHRpQWN0aW9uKG11bHRpQWN0aW9uKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3N3aXBlLWFjdGlvbicsIGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgZHJpdmVyO1xuICAgIGJlZm9yZShhc3luYyAoKSA9PiB7XG4gICAgICBkcml2ZXIgPSBhd2FpdCBpbml0RHJpdmVyKE9iamVjdC5hc3NpZ24oe30sIEFQSURFTU9TX0NBUFMsIHtcbiAgICAgICAgYXBwUGFja2FnZTogJ2lvLmFwcGl1bS5hbmRyb2lkLmFwaXMnLFxuICAgICAgICBhcHBBY3Rpdml0eTogJy52aWV3Lkxpc3QxJyxcbiAgICAgIH0pKTtcbiAgICB9KTtcbiAgICBhZnRlcihhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCBkcml2ZXIucXVpdCgpO1xuICAgIH0pO1xuXG4gICAgYXN5bmMgZnVuY3Rpb24gYXNzZXJ0RWxlbWVudCAoZHJpdmVyLCBwcmVzZW50ID0gdHJ1ZSkge1xuICAgICAgbGV0IGVscyA9IGF3YWl0IGRyaXZlci5lbGVtZW50c0J5WFBhdGgoXCIvLypbQHRleHQ9J0FiZXJ0YW0nXVwiKTtcbiAgICAgIGVscy5zaG91bGQuYmUuYW4uaW5zdGFuY2VvZihBcnJheSk7XG4gICAgICBlbHMuc2hvdWxkLmhhdmUubGVuZ3RoKHByZXNlbnQgPyAxIDogMCk7XG4gICAgfVxuXG4gICAgaXQoJ3Nob3VsZCBzd2lwZSBAc2tpcC1jaScsIGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IGFzc2VydEVsZW1lbnQoZHJpdmVyLCB0cnVlKTtcbiAgICAgIGNvbnN0IGFjdGlvbiA9IG5ldyB3ZC5Ub3VjaEFjdGlvbigpO1xuICAgICAgYWN0aW9uLnByZXNzKHt4OiAxMDAsIHk6IDY1MH0pXG4gICAgICAgIC53YWl0KDMwMDApXG4gICAgICAgIC5tb3ZlVG8oe3g6IDEwMCwgeTogNTB9KVxuICAgICAgICAucmVsZWFzZSgpO1xuICAgICAgZHJpdmVyLnBlcmZvcm1Ub3VjaEFjdGlvbihhY3Rpb24pO1xuICAgICAgYXdhaXQgYXNzZXJ0RWxlbWVudChkcml2ZXIsIGZhbHNlKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vLi4ifQ==
